---
import Button from '@/components/Button.astro';

const NavItems = [
	{
		href: '/projects',
		label: 'Projects',
	},
	{
		href: '/skills',
		label: 'Skills',
	},
	{
		href: '/about-me',
		label: 'About Me',
	},
	{
		href: '/work-history',
		label: 'Work History',
	},
];
---

<header class="w-full bg-primary-light shadow-sm shadow-primary-light sticky top-0 z-10">
	<div class="container-fluid md:container mx-auto flex h-16 items-center justify-between px-4 md:px-0">
		<a class="flex items-center gap-2 text-md font-semibold logo" href="/">
			<img
				src="logos/green-highlight-horizontal.svg"
				alt="Tailored Web"
				class="h-12 lg:h-16 w-auto hidden xxs:block"
			/>
			<img src="logos/tw-logo-green.svg" alt="Tailored Web" class="h-14 w-auto block xxs:hidden" />
		</a>
		<nav class="hidden md:flex items-center gap-4 text-lg font-medium">
			{
				NavItems.map((item) => (
					<a
						class="relative after:absolute after:bottom-0 after:left-0 after:h-0.5 after:w-full after:bg-gradient-to-r after:from-primary after:to-primary-darker after:opacity-0 after:transition-opacity hover:after:opacity-100 focus:after:opacity-100"
						href={item.href}>
						{item.label}
					</a>
				))
			}
			<Button href="/contact" title="Contact Me" theme="primary-dark" size="lg" />
		</nav>
		<div class="flex justify-end md:hidden gap-4 relative">
			<Button href="/contact" title="Contact Me" theme="primary-dark" size="lg" classes="hidden xs:flex" />
			<button
				class="hamburger-menu flex items-center justify-center whitespace-nowrap h-10 w-10 md:hidden transition duration-300 ease-in-out"
				type="button"
				aria-expanded="false"
				aria-controls="mobile-menu">
				<svg
					xmlns="http://www.w3.org/2000/svg"
					width="24"
					height="24"
					viewBox="0 0 24 24"
					fill="none"
					stroke="currentColor"
					stroke-width="2"
					stroke-linecap="round"
					stroke-linejoin="round"
					class="h-6 w-6">
					<line x1="4" x2="20" y1="12" y2="12"></line>
					<line x1="4" x2="20" y1="6" y2="6"></line>
					<line x1="4" x2="20" y1="18" y2="18"></line>
					<line x1="4" x2="20" y1="4" y2="18" class="mobile-line"></line>
					<line x1="4" x2="20" y1="18" y2="4" class="mobile-line"></line>
				</svg>
				<span class="sr-only">Toggle navigation menu</span>
			</button>
			<nav
				id="mobile-menu"
				class="absolute z-10 top-12 mt-1 w-screen max-w-max -tranlate-x-1/2 px-4 flex flex-col gap-2 hidden bg-primary-light text-primary-darker shadow-lg shadow-primary-dark rounded-br-md rounded-bl-md p-2 md:hidden">
				{
					NavItems.map((item) => (
						<a
							class="relative p-1 text-lg after:absolute after:bottom-0 after:left-0 after:h-0.5 after:w-full after:bg-gradient-to-r after:from-primary after:to-primary-darker after:opacity-0 after:transition-opacity hover:after:opacity-100 focus:after:opacity-100"
							href={item.href}>
							{item.label}
						</a>
					))
				}
				<Button
					href="/contact"
					title="Contact Me"
					theme="primary-dark"
					size="lg"
					classes="flex my-2 xs:hidden"
				/>
			</nav>
		</div>
	</div>
</header>

<style lang="scss">
	.logo {
		border: 2px solid transparent;
		&:focus {
			border: 2px solid var(--primary-darker);
			border-radius: 6px;
		}
	}
	.hamburger-menu {
		border: 3px solid var(--primary-darker);
		border-radius: 6px;
		> svg {
			line.mobile-line {
				display: none;
			}
		}
		&:hover,
		&:focus {
			background-color: var(--primary-darker);
			color: var(--primary-light);
			box-shadow: inset 0 0 0 0.125rem var(--primary-light);
			> svg {
				> line {
					@apply stroke-primary-light;
				}
			}
		}
		&[aria-expanded='true'] {
			#mobile-menu {
				display: flex;
			}
			svg {
				line {
					display: none;
					&.mobile-line {
						display: block;
					}
				}
			}
		}
	}
</style>

<script>
	const hamburger = document.querySelector('.hamburger-menu');
	const nav = document.querySelector('#mobile-menu');

	if (hamburger && nav) {
		hamburger.addEventListener('click', () => {
			nav.classList.toggle('hidden');
			const isExpanded = hamburger.getAttribute('aria-expanded') === 'true';
			hamburger.setAttribute('aria-expanded', (!isExpanded).toString());
		});
	}
</script>
