---
import type { HTMLAttributes } from 'astro/types';

interface Props extends HTMLAttributes<'a'> {
	size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl';
	isOutline?: boolean;
	theme?:
		| 'primary'
		| 'primary-dark'
		| 'primary-darker'
		| 'primary-light'
		| 'primary-bright'
		| 'secondary'
		| 'secondary-dark'
		| 'secondary-darker'
		| 'secondary-light'
		| 'secondary-bright'
		| 'gray'
		| 'light-gray'
		| 'dark'
		| 'white';
	classes?: string;
	href: string;
	title: string;
}

const { href, title, size = 'md', isOutline, theme = 'primary', classes, ...rest } = Astro.props;
const backgroundColor = `var(--${theme})`;
const textColor =
	theme === 'primary-bright' || theme === 'primary-light' || theme === 'white' || theme === 'light-gray'
		? 'var(--primary-darker)'
		: theme === 'secondary-bright'
			? 'var(--secondary-dark)'
			: theme === 'secondary' || theme === 'secondary-dark' || theme === 'secondary-light'
				? 'var(--secondary-bright)'
				: 'var(--primary-light)';
const shadowColor = `var(--${theme})`;
---

<a
	href={href}
	class:list={[
		classes,
		{ outline: isOutline },
		`text-${size}`,
		'rounded-full px-4 py-2 transition-all duration-300',
	]}
	{...rest}>
	{title}
</a>

<style
	lang="scss"
	define:vars={{
		backgroundColor,
		textColor,
		shadowColor,
	}}
>
	a {
		--bg: var(--backgroundColor);
		--color: var(--textColor);
		--shadow-color: var(--shadowColor);

		background-color: var(--bg);
		color: var(--color);
		box-shadow: 0 0 0 var(--size) var(--shadow-color);
		&:focus,
		&:hover {
			@apply transition-all duration-300;
			background-color: var(--color);
			color: var(--bg);
			box-shadow: inset 0 0 0 0.25rem (var(--shadow-color));
		}
	}
</style>
